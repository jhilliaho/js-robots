<!DOCTYPE html>

<html>
<head>
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0"/>

	<style>

	#demoCanvas {
		width: 100%;
	}
	html, body {
		width:  100%;
		height: 100%;
		margin: 0px;
	}

	</style>

	<script src="https://code.createjs.com/easeljs-0.8.1.min.js"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
	<script src="https://cdn.socket.io/socket.io-1.3.5.js"></script>

</head>






<body onresize="init()">
	<canvas id='canvas'></canvas>
</body>








<script>

var stage1, stage2;
var returnInterval1 = null;
var returnInterval2 = null;
var movementUpdateTime = Date.now();

var x1ToSend = 0;
var y1ToSend = 0;
var x2ToSend = 0;
var y2ToSend = 0;

var socket = io();
console.log("Trying");

function sendValues(override){
	var pos = {};

	if (Date.now() - movementUpdateTime > 50 || override) {
		movementUpdateTime = Date.now();
		pos.x1 = Math.round(x1ToSend);
		pos.y1 = Math.round(y1ToSend);
		
		pos.x2 = Math.round(x2ToSend);
		pos.y2 = Math.round(y2ToSend);

		console.log("Sending values ", pos);

		socket.emit('newData', pos);
	}
};

var init = function init() {
	console.log("init");

	var ctx = document.getElementById('canvas').getContext('2d');

	var windowWidth = window.innerWidth;
	var windowHeight = window.innerHeight;

	ctx.canvas.width  = windowWidth;
	ctx.canvas.height = windowHeight;

	stage = new createjs.Stage("canvas");

	createjs.Touch.enable(stage1);

	stage.mouseMoveOutside = true; 

	var circle1 = new createjs.Shape();
	circle1.graphics.beginFill("red").drawCircle(0, 0, 50);
	var label1 = new createjs.Text("Drag", "bold 14px Arial", "#FFFFFF");
	label1.textAlign = "center";
	label1.y = -7;
	var dragger1 = new createjs.Container();
	dragger1.x = windowWidth/2
	dragger1.y = windowHeight/2;
	dragger1.addChild(circle1, label1);
	stage.addChild(dragger1);
	
	var circle2 = new createjs.Shape();
	circle2.graphics.beginFill("red").drawCircle(0, 0, 50);
	var label2 = new createjs.Text("Drag", "bold 14px Arial", "#FFFFFF");
	label2.textAlign = "center";
	label2.y = -7;
	var dragger2 = new createjs.Container();
	dragger2.x = windowWidth/2
	dragger2.y = windowHeight/2;
	dragger2.addChild(circle2, label2);
	stage.addChild(dragger2);

	dragger1.on("pressmove",function(evt) {
		clearInterval(returnInterval1);
		evt.currentTarget.x = evt.stageX;
		evt.currentTarget.y = evt.stageY;
		stage.update();
		x1ToSend = evt.currentTarget.x - windowWidth/2;
		y1ToSend = windowHeight/2 - evt.currentTarget.y;
		sendValues(false);
	});

	dragger2.on("pressmove",function(evt) {
		clearInterval(returnInterval2);
		evt.currentTarget.x = evt.stageX;
		evt.currentTarget.y = evt.stageY;
		stage.update();
		x2ToSend = evt.currentTarget.x - windowWidth/2;
		y2ToSend = windowHeight/2 - evt.currentTarget.y;
		sendValues(false);
	});

	dragger1.on("pressup",function(evt) {
		returnInterval1 = setInterval(function(){
			evt.currentTarget.x = 0.9 * (evt.currentTarget.x-windowWidth/2) + windowWidth/2;
			evt.currentTarget.y = 0.9 * (evt.currentTarget.y-windowHeight/2) + windowHeight/2;
			x1ToSend = evt.currentTarget.x - windowWidth/2;
			y1ToSend = windowHeight/2 - evt.currentTarget.y;        
			sendValues(false);
			if (evt.currentTarget.x > windowWidth/2-1 && evt.currentTarget.x < windowWidth/2 + 1 && evt.currentTarget.y > windowHeight/2-1 && evt.currentTarget.y < windowHeight/2+1) {
				console.log("CENTER");
				clearInterval(returnInterval1);
				evt.currentTarget.x = windowWidth/2;
				evt.currentTarget.y = windowHeight/2;
				x1ToSend = 0;
				y1ToSend = 0;
				sendValues(true);
			}
			stage.update();
		}, 10);
	});

	dragger2.on("pressup",function(evt) {
		returnInterval2 = setInterval(function(){
			evt.currentTarget.x = 0.9 * (evt.currentTarget.x-windowWidth/2) + windowWidth/2;
			evt.currentTarget.y = 0.9 * (evt.currentTarget.y-windowHeight/2) + windowHeight/2;
			x2ToSend = evt.currentTarget.x - windowWidth/2;
			y2ToSend = windowHeight/2 - evt.currentTarget.y;        
			sendValues(false);
			if (evt.currentTarget.x > windowWidth/2-1 && evt.currentTarget.x < windowWidth/2 + 1 && evt.currentTarget.y > windowHeight/2-1 && evt.currentTarget.y < windowHeight/2+1) {
				console.log("CENTER");
				clearInterval(returnInterval2);
				evt.currentTarget.x = windowWidth/2;
				evt.currentTarget.y = windowHeight/2;
				x2ToSend = 0;
				y2ToSend = 0;
				sendValues(true);
			}
			stage.update();
		}, 10);
	});

	stage.update();
};
init();


</script>

</html>

